' Gambas class file

Create Static

Public dname As String
Public dExec As String
Public dTerminal As Boolean
Public dType As String
Public dIconName As String
Public dCategory As String
Public dGenericName As String
Public dComment As String
Public dNoDisplay As Boolean
Public dDisplayOnlyIn As String
Public dNotShowIn As String
Public dURL As String

Public Sub init()
  
  dname = ""
  dExec = ""
  dTerminal = False
  dType = ""
  dIconName = ""
  dCategory = ""
  dGenericName = ""
  dComment = ""
  dNoDisplay = ""
  dDisplayOnlyIn = ""
  dNotShowIn = ""
  dURL = ""
  
End

Public Function parse(desktopfile As String)
  
  Dim sLine As String
  Dim sSection As String
  
  init()
  If Not Exist(desktopfile, True) Then Return
  For Each sLine In Split(File.Load(desktopfile), "\n")
    sLine = Trim(sLine)
    If sLine Begins "[" Then 
      sSection = Mid(sLine, 2, Len(sLine) - 2)
      If LCase(sSection) <> "desktop entry" Then Break
    Endif
    If sLine Begins "Name=" Then dName = Right(sLine, - InStr(sLine, "="))
    If sLine Begins "Exec" Then dExec = Right(sLine, - InStr(sLine, "="))
    If sLine Begins "Terminal" Then
      dTerminal = (Lower((Right(sLine, - InStr(sLine, "=")))) = "true")
    Endif
    If sLine Begins "Type" Then dType = Right(sLine, - InStr(sLine, "="))
    If sLine Begins "Icon" Then dIconName = Right(sLine, - InStr(sLine, "="))
    If sLine Begins "URL" Then dURL = Right(sLine, - InStr(sLine, "="))
    If sLine Begins "Categories" Then dCategory = Right(sLine, - InStr(sLine, "="))
    If sLine Begins "GenericName=" Then dGenericName = Right(sLine, - InStr(sLine, "="))
    If sLine Begins "Comment=" Then dComment = Right(sLine, - InStr(sLine, "="))
    If sLine Begins "NoDisplay" Then dNoDisplay = CBool(Right(sLine, - InStr(sLine, "=")))
    If sLine Begins "DisplayOnlyIn" Then dDisplayOnlyIn = CBool(Right(sLine, - InStr(sLine, "=")))
    If sLine Begins "NotShowIn" Then dNotShowIn = CBool(Right(sLine, - InStr(sLine, "=")))
  Next
  
End

Static Private image_cache As New Collection

Static Public Sub Get_mime_Icon(path As String, Optional rSize As Integer = 16) As Picture
  
  Dim mimetype As String
  Dim aKey As String 
  
  Try mimetype = DesktopMime.FromFile(path).type
  If Error Then Return Null
  aKey = mimetype & Chr(8) & rsize
  If Not image_cache.Exist(aKey) Then 
    If mimetype = "application/x-executable" Then 
      image_cache[aKey] = Picture["icon:/" & rSize & "/exec"]
    Else
      image_cache[aKey] = DesktopMime.FromFile(path).GetIcon(rSize).Picture
    Endif
  Else
  Endif
  Return image_cache[aKey]
  
End

Static Public Sub Mime_exe(path As String) As String
  
  Dim mimetype As String
  
  If path = "" Then Return False
  'Shell "file -biL '" & path & "' |cut -d ';' -f 1" To mimetype
  Shell "file -biL '" & path & "'" To mimetype
  path = Trim(path)
  mimetype = Trim(mimetype)
  If mimetype Like "*executable*" Then Return True
  If mimetype Like "*shellscript*" Then Return True
  If mimetype = "application/octet-stream; charset=binary" Then Return True
  Return False
  
End

Static Public Sub GetIcon(dIconName As String, Optional Size As Integer = 16) As Image
  
  Dim sPath As String
  Dim hImage As Image
  Dim sDir As String
  Dim sSize As String
  Dim hSvg As SvgImage
  Dim s As String
  
  If Exist(dIconName, True) Then 
    If dIconName Ends ".svg" Then
      hSvg = SvgImage.Load(dIconName)
      hImage = New Image(Size, Size, Color.transparent)
      Paint.Begin(hImage)
      hSvg.Resize(size, Size)
      hSvg.Paint
      Paint.End
    Else
      Try hImage = Image.Load(dIconName)
    Endif
    
  Else
    If ((dIconName Ends ".png") Or (dIconName Ends ".xpm")) Then dIconName = File.BaseName(dIconName)
    For Each sDir In [Desktop.DataDir &/ "icons", "/usr/share/icons"]
      'For Each sSize In [CStr(Size), "128", "64", "32"]      
      For Each sSize In [CStr(Size), "256", "128", "64", "48", "32" "22", "16", "8"]
        sPath = Subst(sDir &/ "hicolor/&1x&1/apps/&2.png", sSize, dIconName)
        If Exist(sPath, True) Then 
          Try hImage = Image.Load(sPath)
          If hImage Then Break
        Endif
        sPath = Subst(sDir &/ "hicolor/&1x&1/apps/&2.xpm", sSize, dIconName)
        If Exist(sPath, True) Then 
          Try hImage = Image.Load(sPath)
          If hImage Then Break
        Endif
      Next
      If hImage Then Break
    Next
    
    If Not hImage Then
      sPath = Subst("/usr/share/pixmaps/&1.png", dIconName)
      If Exist(sPath, True) Then Try hImage = Image.Load(sPath)
    Endif
    
    If Not hImage Then
      sPath = Subst("/usr/share/pixmaps/&1.xpm", dIconName)
      If Exist(sPath, True) Then Try hImage = Image.Load(sPath)
    Endif
    
  Endif
  If Not hImage Then
    'For Each s In ["apps", "actions", "places", "devices"]
    For Each s In ["apps", "actions", "places", "devices", "categories", "emblems", "mime", "misc", "status", "mimetypes"]
      Try hImage = Stock[CStr(Size) &/ s &/ dIconName].Image
      If hImage Then Break
    Next
  Endif
  If Not hImage Then hImage = fallback_icon(dIconName, size)
  If hImage.W <> Size Or If hImage.H <> Size Then hImage = hImage.Stretch(Size, Size)
  Return hImage
Catch
  
End

Static Private Sub fallback_icon(iconname As String, size As Integer) As Image
  
  Dim tPath, theme As String
  Dim icon_theme As String
  Dim iconfiles As String[]
  Dim iconfiles_name As String
  Dim scores As New Integer[]
  Dim maxscore As Integer = 0
  Dim best_item_index As Integer = 0
  Dim best_item As String
  Dim good_matches As New String[]
  Dim i, s As Integer
  Dim himage As Image
  Dim t0 As Float
  
  Debug "getting fallback icon"
  
  icon_theme = Settings["icon_theme", ""]
  If icon_theme = "" Then Stop
  t0 = Timer()
  
  If icon_theme <> "" Then 
    If Exist(User.home & "/" & icon_theme, True) Then
      tpath = User.home & "/" & icon_theme
    Else
      tpath = "/usr/share/icons/" & icon_theme
    Endif
    
    iconfiles = RDir(tPath, "*/*")
    For i = 0 To iconfiles.Max
      iconfiles_name = File.BaseName(iconfiles[i])
      For s = 0 To Len(iconfiles_name) - 1
        If Not (iconname Begins Left(iconfiles_name, s + 1)) Then Break
      Next
      If (s > maxscore) Then
        maxscore = s
        best_item_index = i
      Endif     
    Next
  Endif  
  
  If maxscore > (Len(File.BaseName(iconname)) Div 2) Then
    best_item = tpath & "/" & iconfiles[best_item_index]
    If best_item Ends "*.svg" Then Try Return M_Core.image_from_svg(best_item, size)
    Try Return Image.Load(best_item)
  Endif
  
  Return Null 'Stock[CStr(Size) &/ "program"].Image
  
End

Static Public Sub Get_file_Icon(dIconName As String, Optional Size As Integer = 16) As String
  
  Dim sPath As String
  Dim hImage As Image
  Dim sDir As String
  Dim sSize As String
  Dim s As String
  Dim out As String
  
  If Exist(dIconName, True) Then Return dIconName
  
  If ((dIconName Ends ".png") Or (dIconName Ends ".xpm")) Then dIconName = File.BaseName(dIconName)
  
  For Each sDir In [Desktop.DataDir &/ "icons", "/usr/share/icons"]
    
    For Each sSize In [CStr(Size), "256", "128", "64", "48", "32" "22", "16", "8"]
      
      sPath = Subst(sDir &/ "hicolor/&1x&1/apps/&2.png", sSize, dIconName)
      If Exist(sPath, True) Then 
        Try hImage = Image.Load(sPath)
        If hImage Then 
          out = sPath
          Goto returnLabel
        Endif
      Endif
      
      sPath = Subst(sDir &/ "hicolor/&1x&1/apps/&2.xpm", sSize, dIconName)
      If Exist(sPath, True) Then 
        Try hImage = Image.Load(sPath)
        If hImage Then 
          out = sPath
          Goto returnLabel
        Endif
      Endif
      
    Next 'sSize
    
    If hImage Then Goto returnlabel
  Next 'sDir
  
  For Each sPath In [Subst("/usr/share/pixmaps/&1.png", dIconName), Subst("/usr/share/pixmaps/&1.xpm", dIconName)]
    If Exist(sPath, True) Then 
      Try hImage = Image.Load(sPath)
      If hImage Then 
        out = sPath
        Goto returnLabel
      Endif
    Endif
  Next
  
  For Each s In ["apps", "actions", "places", "devices", "categories", "emblems", "mime", "misc", "status", "mimetypes"]
    Try hImage = Stock[CStr(Size) &/ s &/ dIconName].Image
    If hImage Then 
      out = sPath
      Goto returnLabel
    Endif
  Next
  
returnLabel:
  Return out
  
End
